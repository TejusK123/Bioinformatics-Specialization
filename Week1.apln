
⍝Code Challenge: Implement PatternCount (reproduced below).
⍝Input: Strings Text and Pattern.
⍝Output: Count(Text, Pattern).

PatternCount ← {+/(⊂⍺)≡¨(⊂⍤⊢⌺(≢⍺)⊢⍵)}

⍝Usage
'ATC' PatternCount 'GATCCATCTT'

⍝Loading Data
testinp ← ⊃⎕NGET '/dataset_30272_6.txt' 1
pattern ← ⊃testinp[2]
sequence ← ⊃testinp[1]


pattern PatternCount sequence

⍝ Code Challenge: Solve the Frequent Words Problem.

⍝ Input: A string Text and an integer k.
⍝ Output: All most frequent k-mers in Text.


test ← 'GATTCGCCAGACGTTGGTACCTCACACACAAACTTACGATTCGCCAGCCTCACACACGATTCGCCAGAAACTTACGATTCGCCAGGATTCGCCAGACGTTGGTAAAACTTACACGTTGGTAACGTTGGTATAAGAATAGCGATTCGCCAGGATTCGCCAGGATTCGCCAGCCTCACACACCCTCACACACGATTCGCCAGAAACTTACTAAGAATAGCTAAGAATAGCGATTCGCCAGAAACTTACACGTTGGTATAAGAATAGCCCTCACACACTAAGAATAGCACGTTGGTAACGTTGGTAACGTTGGTAAAACTTACGATTCGCCAGCCTCACACACACGTTGGTAACGTTGGTACCTCACACACACGTTGGTAGATTCGCCAGACGTTGGTAAAACTTACGATTCGCCAGACGTTGGTAGATTCGCCAGGATTCGCCAGTAAGAATAGCTAAGAATAGCCCTCACACACTAAGAATAGCACGTTGGTAGATTCGCCAGCCTCACACACGATTCGCCAGTAAGAATAGCAAACTTACTAAGAATAGCCCTCACACACCCTCACACACACGTTGGTAAAACTTACGATTCGCCAGACGTTGGTAAAACTTACGATTCGCCAGCCTCACACACCCTCACACACTAAGAATAGCGATTCGCCAGAAACTTACGATTCGCCAGTAAGAATAGCACGTTGGTATAAGAATAGCAAACTTACGATTCGCCAGGATTCGCCAGTAAGAATAGCAAACTTACACGTTGGTACCTCACACACGATTCGCCAGACGTTGGTAGATTCGCCAGTAAGAATAGCCCTCACACACGATTCGCCAGCCTCACACACAAACTTACCCTCACACACACGTTGGTATAAGAATAGCTAAGAATAGCTAAGAATAGCAAACTTACAAACTTACCCTCACACACACGTTGGTAGATTCGCCAGGATTCGCCAGCCTCACACAC'
k ← 12

(=∘(⌈/)⍨{⍵ PatternCount test} ¨(∪⊂⍤⊢⌺k⊢test)) / (∪⊂⍤⊢⌺k⊢test)


⍝ Reverse Complement Problem: Find the reverse complement of a DNA string.

⍝ Input: A DNA string Pattern.
⍝ Output: Patternrc , the reverse complement of Pattern.


⍝ Link Dictionary Functions 

]Link.Create dict /DyalogLinks/dict


⍝ Load the dictionary
nucleotide_map ← 'ACGT' #.dict.Create 'TGCA'

⍝ Define the reverse_complement function
reverse_complement ← {⌽⍺ #.dict.Get ¨ ⍵}


⍝Usage 
nucleotide_map reverse_complement 'AAAACCCGGT'


revcomptest ← ⊃⎕NGET '\dataset_30273_2.txt' 

nucleotide_map reverse_complement revcomptest


⍝ Code Challenge: Solve the Pattern Matching Problem.

⍝ Input: Two strings, Pattern and Genome.
⍝ Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.

Pattern_Matching ← {1-⍨⍸⍺⍷⍵}

⍝Usage

'ATAT' Pattern_Matching 'GATATATGCATATACTT'

⍝ Code Challenge: Solve the Clump Finding Problem (restated below). You will need to make sure that your algorithm is efficient enough to handle a large dataset.

⍝ Clump Finding Problem: Find patterns forming clumps in a string.

⍝ Input: A string Genome, and integers k, L, and t.
⍝ Output: All distinct k-mers forming (L, t)-clumps in Genome.

⍝Janky AF need to manually change t within the Link .aplf function
⍝Also slow af
⍝Just use Python  


⍝The Function within the Link File
⍝--------------------------------------
⍝  Clump_Finding←{
⍝      k←⍺

⍝      seqs←⍵

⍝      PatternCount←{+/(⊂⍺)≡¨(⊂⍤⊢⌺(≢⍺)⊢⍵)}
⍝      PatternCountAll←{⍵ PatternCount seqs}

⍝      (4=PatternCountAll¨∪⊂⍤⊢⌺k⊢seqs)/(∪⊂⍤⊢⌺k⊢seqs) [Need to manually change t here]


⍝  }
⍝------------------------------------


]LINK.Create bio \DyalogLinks\biow1


⍝Testcase
windows←{(~(0∘⊥⌈⊃)¨' '=¨(⊂⍤⊢⌺⍺⊢⍵))/⊂⍤⊢⌺⍺⊢⍵}
clump_test ← 'CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA'
k ← 5
L ← 50
t ← 4

' '(1↓∘∊,¨)((~(∧/¨)(↓' ')=(↓⍪∪↑↑5 #.bio.Clump_Finding ¨ (L windows clump_test)))/(↓⍪∪↑↑5 #.bio.Clump_Finding ¨ (L windows clump_test)))
